#include <iostream>
#include <stdexcept>
#include <sstream>
using namespace std;

#include <limits.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <fcntl.h>

#include <kvan/time-utils.h>
#include <kvan/sigio-logger.h>

struct timespec kvan::logger::start_time;
int kvan::logger::cout_write_fd = -1;
int kvan::logger::cout_read_fd = -1;
int kvan::logger::cerr_write_fd = -1;
int kvan::logger::cerr_read_fd = -1;
int kvan::logger::logger_fd = -1;
int kvan::logger::saved_tty_fd = -1;

#if 0
void kvan::logger::handler(int sig, siginfo_t *sinfo, void *value)
{
  char read_buf[PIPE_BUF];
  memset(read_buf, 0, sizeof read_buf);

  auto read_res = read(read_fd, read_buf, PIPE_BUF);

  if (read_res > 0) {
    if (saved_tty_fd != -1) {
      write(saved_tty_fd, read_buf, read_res);
    }
    if (logger_fd != -1) {
      write(logger_fd, read_buf, read_res);
    }
  }
}
#endif

void kvan::logger::handler_w_ts(int sig, siginfo_t *sinfo, void *value)
{
#if 0
  struct timespec now_time;
  clock_gettime(&now_time);

  // line prefix:
  // 1 - '+'
  // 8 - timestamp secs
  // 1 - '.'
  // 3 - timestamp millisecs
  // 1 - '['
  // 6 - pid
  // 3 - ']: '
  char read_buf[1 + 8 + 1 + 3 + 1 + 6 + 3 + PIPE_BUF];
  memset(read_buf, 0, sizeof read_buf);
  read_buf[0] = '+';
  place_int(&read_buf[1], 8, now_time.tv_sec - start_time.tv_sec);
  read_buf[...] = '.';
  place_int(&read_buf[...], 3, (now_time.tv_nsec - start_time.tv_nsec) / 1000000);
  read_buf[...] = '[';
  place_int(&read_buf[...], 6, pid);
  memcpy(&read_buf[...], "]: ", 3);
#else
  char read_buf[6 + PIPE_BUF];
  memcpy(&read_buf[0], "Hello ", 6);
#endif

  int read_fd = -1;
  if (sinfo->si_fd == cout_read_fd) {
    memcpy(&read_buf[0], "Hello ", 6);
    read_fd = cout_read_fd;
  } else if (sinfo->si_fd == cerr_read_fd) {
    memcpy(&read_buf[0], "hello ", 6);
    read_fd = cerr_read_fd;
  } else {
    write(logger_fd, "wrong fd\n", 9);
    write(saved_tty_fd, "wrong fd\n", 9);
    return;
  }
  
  ssize_t read_res = 0;
  do {
    read_res = read(read_fd, &read_buf[6], PIPE_BUF);

    if (read_res > 0) {
      if (saved_tty_fd != -1) {
	write(saved_tty_fd, read_buf, 6 + read_res);
      }
      if (logger_fd != -1) {
	write(logger_fd, read_buf, 6 + read_res);
      }
    }
  } while (read_res > 0);
}

static void set_fd_flags(int fd)
{
  if (fcntl(fd, F_SETSIG, SIGIO) == -1) {
    throw runtime_error("kvan::logger::setup: fnctl to set F_SETSIG failed");
  }
  
  if (fcntl(fd, F_SETOWN, getpid()) == -1) {
    throw runtime_error("kvan::logger::setup: fnctl to set F_SETOWN failed");
  }

  auto flags = fcntl(fd, F_GETFL);
  if (flags >= 0 && fcntl(fd, F_SETFL, flags | O_ASYNC ) == -1)
    throw runtime_error("kvan::logger::setup: fnctl F_SETFL to set O_ASYNC failed");
}

void kvan::logger::onexit_handler(int e_code, void*)
{
  cout << "onexit: exit with code " << e_code << endl;
}

void kvan::logger::setup(const char* log_fn, bool output_to_console, bool install_onexit)
{
  clock_gettime(CLOCK_REALTIME_COARSE, &start_time);
  
  logger_fd = ::open(log_fn, O_CREAT|O_WRONLY|O_APPEND, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);
  //cout << "logger_fd: " << logger_fd << endl;
  if (logger_fd == -1) {
    throw runtime_error("kvan::logger::setup: can't open log file");
  }

  if (install_onexit) {
    on_exit(onexit_handler, 0);
  }
  
  ostringstream start_log_m;
  start_log_m << "\n=== " << to_isoformat(now_utctimestamp()) << " ";
  start_log_m << "pid: " << getpid() << '\n';
  write(logger_fd, start_log_m.str().c_str(), start_log_m.str().size());
  
  int fds[2];
  if (pipe2(fds, O_DIRECT | O_NONBLOCK) != 0) {
    throw runtime_error("kvan::logger::setup: pipe2() failed");
  }
  cout_read_fd = fds[0]; cout_write_fd = fds[1];

  if (pipe2(fds, O_DIRECT | O_NONBLOCK) != 0) {
    throw runtime_error("kvan::logger::setup: pipe2() failed");
  }
  cerr_read_fd = fds[0]; cerr_write_fd = fds[1];

  struct sigaction act;
  //act.sa_sigaction = handler;
  act.sa_sigaction = handler_w_ts;
  act.sa_flags = 0;
  act.sa_flags = SA_SIGINFO;
  sigemptyset(&act.sa_mask);
  if (sigaction(SIGIO, &act, NULL) == -1) {
    throw runtime_error("kvan::logger::setup: attempt to set up handler for SIGIO failed");
  }

  /* arrange to get the signal */
  set_fd_flags(cout_read_fd);
  set_fd_flags(cerr_read_fd);

  if (output_to_console) {
    saved_tty_fd = dup(1);
  }
  dup2(cout_write_fd, 1);
  dup2(cerr_write_fd, 2);
}
