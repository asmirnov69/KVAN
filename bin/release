#!/usr/local/anaconda3/bin/python -B
#
import sys, os
from KVAN import fuargs
from KVAN.release_utils import *

archive_dir = os.path.join(os.environ['HOME'], 'release-archive')
install_dir = "/usr/local/philotymic"

@fuargs.action
def show_tag():
    repo_top_dir = git_get_repo_top_dir()
    if os.getcwd() != repo_top_dir:
        print("current directory is not top of any git repo")
        return False
    
    if git_check_mods():
        print(f"local modifications found")
        return False

    curr_commit = get_curr_commit()
    print(f"current commit: {curr_commit}")
    curr_tag = get_curr_tag()
    if curr_tag == None:
        print("no tag found")
        return False
    
    verify_curr_tag(curr_tag, repo_top_dir)
    print(curr_tag)
    return True
    
@fuargs.action
def make_release():
    repo_top_dir = git_get_repo_top_dir()
    if os.getcwd() != repo_top_dir:
        print("current directory is not top of any git repo")
        return False

    if git_check_mods():
        print(f"tag_release: local modifications found")
        return False

    curr_commit = get_curr_commit()
    curr_tag = get_curr_tag()
    if curr_tag == None:
        print("make_release: no tag found")
        return False
    verify_curr_tag(curr_tag, repo_top_dir)
    print(f"current tag: {curr_tag}")
    print(f"current_commit: {curr_commit}")
    
    release_archive_pn = os.path.join(archive_dir, f"{curr_tag}.tgz")
    if os.path.exists(release_archive_pn):
        print(f"PROBLEM -- release archive exists: {release_archive_pn}")
        return False
    
    if not os.path.exists(archive_dir):
        os.makedirs(archive_dir)
        print(f"release archive dir created: {archive_dir}")

    with open("./MANIFEST.txt", "w") as fd:
        print(f"commit: {curr_commit}", file = fd)
        print(f"tag: {curr_tag}", file = fd)

    cmd = f"tar czf {release_archive_pn} --transform='s/^\./{curr_tag}/' --exclude=.git ."
    exe_cmd(cmd)

    os.unlink("./MANIFEST.txt")
    print(f"release archive created: {release_archive_pn}")
        
@fuargs.action
def show_manifest(tarball):
    verify_tarball(tarball, None)
    manifest_fn, manifest_ls = extract_manifest(tarball)
    print(f"manifest file: {manifest_fn}")
    for l in manifest_ls:
        print(l)

@fuargs.action
def install(tarball):
    manifest_fn, manifest_ls = extract_manifest(tarball)
    manifest_tag = get_manifest_tag(manifest_ls)
    print(f"found tag: {manifest_tag}")

    print(f"verifying tarball {tarball}")
    verify_tarball(tarball, manifest_tag)

    exp_dest_dir = os.path.join(install_dir, manifest_tag)
    if os.path.exists(exp_dest_dir):
        raise Exception(f"dest dir {exp_dest_dir} already exists")

    print(f"unpacking {tarball} into {exp_dest_dir}")
    unpack_tarball(tarball, install_dir)

    repo_name = manifest_tag.split("-")[0]
    release_symlink = os.path.join(install_dir, repo_name)
    if os.path.exists(release_symlink):
        print(f"flipping symlink {release_symlink} to {exp_dest_dir}")
        os.unlink(release_symlink)
        os.symlink(exp_dest_dir, release_symlink)
    else:
        print(f"new symlink {release_symlink} to {exp_dest_dir}")
        os.symlink(exp_dest_dir, release_symlink)

    print(f"tarball {tarball} released as {exp_dest_dir}")
    print(f"access symlink {release_symlink}")
    print("all done")

    return True
    
if __name__ == "__main__":
    fuargs.exec_actions(sys.argv[1:])
    
