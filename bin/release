#!/usr/bin/env python
#
import sys, os
import subprocess
from KVAN import fuargs

archive_dir = os.path.join(os.environ['HOME'], 'release-archive')

def exe_cmd(cmd, raise_exception = True):
    e_code, out = subprocess.getstatusoutput(cmd)
    if raise_exception and e_code != 0:
        raise Exception(f"non-zero exit code: {cmd}")
    return out if e_code == 0 else None
    
def get_curr_tag():
    return exe_cmd("git describe --exact --tags --abbrev=0", False)

def get_curr_commit():
    return exe_cmd("git rev-parse HEAD", False)

def git_check_mods():
    cmd = "git diff-index --name-only --ignore-submodules HEAD --"
    out = exe_cmd(cmd)
    print(out)
    return len(out) > 0

def git_get_repo_top_dir():
    return exe_cmd("git rev-parse --show-toplevel").strip()

@fuargs.action
def show_tag():
    if os.getcwd() != git_get_repo_top_dir():
        print("current directory is not top of any git repo")
        return False
    
    if git_check_mods():
        print(f"tag_release: local modifications found")
        return False

    curr_tag = get_curr_tag()
    curr_commit = get_curr_commit()
    if curr_tag == None:
        print("no tag found")
        return False
    print(curr_tag)
    print(curr_commit)
    return True
    
@fuargs.action
def make_release():
    if os.getcwd() != git_get_repo_top_dir():
        print("current directory is not top of any git repo")
        return False
    
    if git_check_mods():
        print(f"tag_release: local modifications found")
        return False

    curr_tag = get_curr_tag()
    curr_commit = get_curr_commit()
    if curr_tag == None:
        print("tag_release: no tag found")
        return False
    print(f"current tag: {curr_tag}")
    print(f"current_commit: {curr_commit}")
    
    if not os.path.exists(archive_dir):
        os.makedirs(archive_dir)
        print(f"tag_release: release archive dir created: {archive_dir}")


    with open("./MANIFEST.txt", "w") as fd:
        print("commit: {curr_commit}", file=fd)
        
    cmd = f"tar czf ~/release-archive/{curr_tag}.tgz --transform='s/^\./{curr_tag}/' --exclude=.git ."
    print(cmd)
    exe_cmd(cmd)
    
if __name__ == "__main__":
    fuargs.exec_actions(sys.argv[1:])
    
